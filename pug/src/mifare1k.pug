extends /include/bootstrapV4

block beforehtml
  - const title = 'Mifare 1k Tools'

block style
  meta(property="og:description", content="A ChameleonUltra tool for mifare class 1k.")
  meta(property="og:locale", content="zh_TW")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content=`${baseurl}mifare1k.html`)
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .input-group-prepend > .input-group-text
        width: 80px
      .letter-spacing-n1px
        &, .btn, textarea, select, input
          letter-spacing: -1px
      .text-sm
        font-size: 0.875rem

block content
  #app.my-3.container.text-monospace(v-cloak)
    h4.mb-3.text-center.letter-spacing-n1px #[.bgicon.bgicon-chameleon-ultra.mr-1] #{title}
    .form-group
      label Connect method:
      .input-group.input-group-sm.mb-3
        select.form-control(v-model="ls.adapter")
          option(value="ble") BLE (PC &amp; Android)
          option(value="usb") USB Serial (PC only)
        .input-group-append: button.btn.btn-outline-secondary(@click="btnAdapterTips") #[i.fa.fa-fw.fa-question]
    .card.shadow-sm.mb-2
      h6.card-header.bg-light #[.bgicon.bgicon-chameleon-ultra.mr-1] Slot HF Emulator
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px
        .input-group.input-group-sm.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center Slot
          select.form-control.form-control-sm.letter-spacing-n1px(v-model.number="ss.slot")
            option(v-for="i of _.range(8)" :value="i") Slot {{ i + 1 }}
        .input-group.input-group-sm.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center name
          input.form-control(placeholder="Slot HF name", v-model="ss.name")
          .input-group-append: button.btn.btn-outline-secondary(type="button", @click="ss.name = ''") #[i.fa.fa-fw.fa-times]
        .input-group.input-group-sm.letter-spacing-n1px.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center detection
          select.form-control.form-control-sm(v-model.number="ss.detection")
            option(value="0") Off
            option(value="1") On
        .input-group.input-group-sm.letter-spacing-n1px.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center gen1a
          select.form-control.form-control-sm(v-model.number="ss.gen1a")
            option(value="0") Normal
            option(value="1") Emulate gen1a (magic auth)
        .input-group.input-group-sm.letter-spacing-n1px.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center gen2
          select.form-control.form-control-sm(v-model.number="ss.gen2")
            option(value="0") Normal
            option(value="1") Emulate gen2 (direct write)
        .input-group.input-group-sm.letter-spacing-n1px.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center antiColl
          select.form-control.form-control-sm(v-model.number="ss.antiColl")
            option(value="0") From slot settings
            option(value="1") From block 0
        .input-group.input-group-sm.letter-spacing-n1px.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center write
          select.form-control.form-control-sm(v-model.number="ss.antiColl")
            option(value="0") Normal
            option(value="1") Denied
            option(value="2") Deceive
            option(value="3") Shadow
            option(value="4") Shadow Request
        .row.mx-n1.mb-2
          .col.px-1: button.btn.btn-block.btn-outline-success(@click="btnEmuRead") #[i.fa.fa-fw.fa-sign-out] Load
          .col.px-1: button.btn.btn-block.btn-outline-primary(@click="btnEmuWrite") #[i.fa.fa-fw.fa-sign-in] Emulate
        button.btn.btn-sm.btn-block.btn-outline-danger.mb-2(@click="btnEmuReset") #[i.fa.mr-1.fa-repeat] Reset slot to default
    .card.shadow-sm.mb-2
      h6.card-header.bg-light #[.bgicon.bgicon-nfc.mr-1] Mifare Tag
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px
        h6.card-title M1, CUID, FUID, UFUID
        .input-group.input-group-sm.mb-2
          .input-group-prepend: label.input-group-text.justify-content-center keys
          textarea.form-control(rows="4", v-model="ss.keys", :class="isValidKeys(ss.keys) ? 'is-valid' : 'is-invalid'")
        .row.mx-n1.mb-2
          .col.px-1: button.btn.btn-block.btn-outline-success(@click="btnGen2Read") #[i.fa.fa-fw.fa-upload] Read
          .col.px-1: button.btn.btn-block.btn-outline-primary(@click="btnGen2Write") #[i.fa.fa-fw.fa-download] Write
        button.btn.btn-sm.btn-block.btn-outline-info.mb-2(@click="btnKeysGrab") #[i.fa.mr-1.fa-key] Grab keys from Mifare Data
        button.btn.btn-sm.btn-block.btn-outline-secondary.mb-2(@click="btnKeysReset") #[i.fa.mr-1.fa-fire] Reset to well-known keys
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px.border-top
        h6.card-title UID (Chinese Magic Card gen1a)
        .row.mx-n1.mb-2
          .col.px-1: button.btn.btn-block.btn-outline-success(@click="btnGen1aRead") #[i.fa.fa-fw.fa-upload] Read
          .col.px-1: button.btn.btn-block.btn-outline-primary(@click="btnGen1aWrite") #[i.fa.fa-fw.fa-download] Write
    .card.shadow-sm.mb-2
      h6.card-header.bg-light #[i.fa.fa-id-card.mr-1] Mifare Data
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px
        input.d-none(type="file", ref="cardImport", @change="cardImport?.cb?.($event.target.files[0])")
        .row.mx-n1.mb-2
          .col.px-1: button.btn.btn-block.btn-outline-success(@click="btnCardImport") #[i.fa.fa-fw.fa-file-code-o] Import
          .col.px-1: button.btn.btn-block.btn-outline-primary(@click="btnCardExport") #[i.fa.fa-fw.fa-floppy-o] Export
        button.btn.btn-sm.btn-block.btn-outline-danger.mb-2(@click="btnCardReset") #[i.fa.mr-1.fa-repeat] Reset to empty mifare
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px.border-top
        h6.card-title Anit Collision
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center UID
          input.form-control(pattern="[\\dA-Fa-f]{8}([\\dA-Fa-f]{6})?([\\dA-Fa-f]{6})?", placeholder="Hex format of UID", required, v-model="ss.uid")
          .input-group-append: button.btn.btn-outline-secondary(type="button", @click="ss.uid = ''") #[i.fa.fa-fw.fa-times]
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center ATQA
          input.form-control(pattern="[\\dA-Fa-f]{4}", placeholder="Hex format of ATQA", required, v-model="ss.atqa")
          .input-group-append: button.btn.btn-outline-secondary(type="button", @click="ss.atqa = ''") #[i.fa.fa-fw.fa-times]
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center SAK
          input.form-control(pattern="[\\dA-Fa-f]{2}", placeholder="Hex format of SAK", required, v-model="ss.sak")
          .input-group-append: button.btn.btn-outline-secondary(type="button", @click="ss.sak = ''") #[i.fa.fa-fw.fa-times]
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center ATS
          input.form-control(pattern="([\\dA-Fa-f]{2})*", placeholder="Hex format of ATS", v-model="ss.ats")
          .input-group-append: button.btn.btn-outline-secondary(type="button", @click="ss.ats = ''") #[i.fa.fa-fw.fa-times]
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px.border-top
        h6.card-title Mifare 1k Card Data
        .input-group.input-group-sm.mb-2(v-for="i in _.times(16)")
          .input-group-prepend: label.input-group-text.justify-content-center.flex-column(style="width: 2rem", :for="`i-toggle-${i}`")
            input.my-2(type="checkbox", v-model="ss.toggle[i]", :id="`i-toggle-${i}`")
            span {{ `0${i}`.slice(-2) }}
          textarea.form-control(rows="4", v-model="ss.body[i]", :class="isValidBlock(ss.body[i]) ? 'is-valid' : 'is-invalid'")
    .modal.fade(tabindex="-1", ref="cardExport")
      .modal-dialog.modal-dialog-centered.modal-xl
        .modal-content
          .modal-header
            h5.modal-title #[i.fa.fa-fw.fa-floppy-o] Card Export
            button.close(type="button", data-dismiss="modal") #[span &times;]
          .modal-body
            a.btn.btn-block.btn-outline-primary.mb-2.text-left(
              :download="cardExport.json.download",
              :href="cardExport.json.href",
              target="_blank")
              .my-1 {{ cardExport.json.download }}
              h6.text-muted.mb-1 Click to download as JSON format. This format can be used in Proxmark3 and Chameleon Mini GUI.
            a.btn.btn-block.btn-outline-primary.text-left(
              :download="cardExport.bin.download",
              :href="cardExport.bin.href",
              target="_blank")
              .my-1 {{ cardExport.bin.download }}
              h6.text-muted.mb-1 Click to download as BIN format. This format can be used in Proxmark3, libnfc, mfoc...
            a.btn.btn-block.btn-outline-primary.text-left(
              :download="cardExport.eml.download",
              :href="cardExport.eml.href",
              target="_blank")
              .my-1 {{ cardExport.eml.download }}
              h6.text-muted.mb-1 Click to download as EML format. This format can be used in Proxmark3 emulator.
            a.btn.btn-block.btn-outline-primary.text-left(
              :download="cardExport.mct.download",
              :href="cardExport.mct.href",
              target="_blank")
              .my-1 {{ cardExport.mct.download }}
              h6.text-muted.mb-1 Click to download as MCT format. This format can be used in Mifare Classic Tool.

block script
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/joi@17/dist/joi-browser.min.js")
  script.
    const { AnimationMode, Buffer, ButtonAction, ChameleonUltra, DeviceMode, FreqType, TagType, WebbleAdapter, WebserialAdapter } = ChameleonUltraJS // eslint-disable-line
    const ultraUsb = new ChameleonUltra(true)
    ultraUsb.use(new WebserialAdapter())
    const ultraBle = new ChameleonUltra(true)
    ultraBle.use(new WebbleAdapter())

    const WELL_KNOWN_KEYS = ['ffffffffffff', 'a0a1a2a3a4a5', 'd3f7d3f7d3f7']

    function getEmptyCardBody () {
      const blkDefault = {
        factory: 'deadbeef220804000177a2cc35afa51d',
        empty: '00000000000000000000000000000000',
        acl: 'ffffffffffffff078069ffffffffffff',
      }
      return _.times(16, secNo => {
        const blocks = _.times(4, blkNo => {
          if (secNo === 0 && blkNo === 0) return blkDefault.factory
          else if (blkNo === 3) return blkDefault.acl
          else return blkDefault.empty
        })
        return blocks.join('\n')
      })
    }

    window.vm = new Vue({
      el: '#app',
      data: {
        ls: {
          adapter: 'ble',
        },
        ss: {
          antiColl: 0,
          atqa: '0400',
          ats: '',
          body: getEmptyCardBody(),
          detection: 0,
          gen1a: 0,
          gen2: 0,
          keys: WELL_KNOWN_KEYS.join('\n'),
          name: '',
          sak: '08',
          slot: 0,
          toggle: _.times(16, () => true),
          uid: 'deadbeef',
          write: 0,
        },
        cardImport: { cb: null },
        cardExport: {
          json: { download: '', href: '' },
          bin: { download: '', href: '' },
          eml: { download: '', href: '' },
          mct: { download: '', href: '' },
        },
      },
      async mounted () {
        // 自動儲存功能
        for (const [storage, key] of [[localStorage, 'ls'], [sessionStorage, 'ss']]) {
          try {
            const saved = JSON5.parse(storage.getItem(location.pathname))
            if (saved) this.$set(this, key, _.merge(this[key], saved))
          } catch (err) {}
          this.$watch(key, () => {
            storage.setItem(location.pathname, JSON5.stringify(this[key]))
          }, { deep: true })
        }
      },
      computed: {
        ultra () {
          return this.ls.adapter === 'usb' ? ultraUsb : ultraBle
        },
      },
      methods: {
        async btnEmuRead () {
          try {
            this.showLoading({ text: 'Loading emulator' })
            /** @type ChameleonUltra */
            const ultra = this.ultra
            await ultra.cmdSlotSetActive(this.ss.slot)
            this.$set(this, 'ss', {
              ...this.ss,
              name: await ultra.cmdSlotGetFreqName(this.ss.slot, FreqType.HF),
              ..._.mapValues(await ultra.cmdMf1GetEmuSettings(), _.toInteger), // antiColl, detection, gen1a, gen2, write
              ..._.mapValues(await ultra.cmdHf14aGetAntiCollData(), (buf, key) => (key === 'atqa' ? buf.reverse() : buf).toString('hex')),
            })
            for (let i = 0; i < 16; i++) {
              if (!this.ss.toggle[i]) continue
              const sectorData = await ultra.cmdMf1ReadEmuBlock(i << 2, 4)
              this.$set(this.ss.body, i, _.map(sectorData.chunk(16), chunk => chunk.toString('hex')).join('\n'))
            }
            await Swal.fire({ icon: 'success', title: 'Load success' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Load failed', text: err.message })
          }
        },
        async btnEmuWrite () {
          try {
            const msg1 = `Slot ${this.ss.slot + 1} will be REPLACE! Continue?`
            if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
            this.showLoading({ text: 'Emulating' })
            const ultra = this.ultra
            await ultra.cmdSlotSetActive(this.ss.slot)
            const freqName = this.ss.name
            if (_.isString(freqName) && freqName.length > 0) await ultra.cmdSlotSetFreqName(this.ss.slot, FreqType.HF, freqName)
            await ultra.cmdMf1SetAntiCollMode(this.ss.antiColl)
            await ultra.cmdMf1SetDetectionEnable(this.ss.detection)
            await ultra.cmdMf1SetGen1aMode(this.ss.gen1a)
            await ultra.cmdMf1SetGen2Mode(this.ss.gen2)
            await ultra.cmdMf1SetWriteMode(this.ss.write)
            await ultra.cmdHf14aSetAntiCollData({
              atqa: Buffer.fromHexString(this.ss.atqa).reverse(),
              ats: Buffer.fromHexString(this.ss.ats),
              sak: Buffer.fromHexString(this.ss.sak),
              uid: Buffer.fromHexString(this.ss.uid),
            })
            for (let i = 0; i < 16; i++) {
              if (!this.ss.toggle[i]) continue
              const sectorData = Buffer.fromHexString(this.ss.body[i])
              await ultra.cmdMf1WriteEmuBlock(i << 2, sectorData)
            }
            await Swal.fire({ icon: 'success', title: 'Emulate success' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Emulate failed', text: err.message })
          }
        },
        async btnEmuReset () {
          try {
            const msg1 = `Slot ${this.ss.slot + 1} will be RESET! Continue?`
            if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
            this.showLoading({ text: 'Resetting' })
            const ultra = this.ultra
            // reset slot
            await ultra.cmdSlotChangeTagType(this.ss.slot, TagType.MIFARE_1024)
            await ultra.cmdSlotResetTagType(this.ss.slot, TagType.MIFARE_1024)
            await ultra.cmdSlotSetEnable(this.ss.slot, true)
            await ultra.cmdSlotSetActive(this.ss.slot)
            await Swal.fire({ icon: 'success', title: 'Reset success' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Reset failed', text: err.message })
          }
        },
        async btnGen1aRead () {
          try {
            const genSwalCfg = i => ({
              html: `<div class="d-flex flex-column"><div class="progress mb-2"><div class="progress-bar progress-bar-striped" role="progressbar" style="width: ${i / 16 * 100}%"></div></div><div class="d-flex justify-content-between"><span>Reading mifare gen1a:</span><span>${i} / 16</span></div></div>`,
            })
            this.showLoading(genSwalCfg(0))
            const ultra = this.ultra
            await ultra.cmdChangeDeviceMode(DeviceMode.READER)
            for (let i = 0; i < 16; i++) {
              if (!this.ss.toggle[i]) continue
              const sectorData = await ultra.mf1Gen1aReadBlocks(i << 2, 4)
              this.$set(this.ss.body, i, _.map(sectorData.chunk(16), chunk => chunk.toString('hex')).join('\n'))
              this.showLoading(genSwalCfg(i + 1))
            }
            await ultra.cmdChangeDeviceMode(DeviceMode.TAG)
            await Swal.fire({ icon: 'success', title: 'Read success' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Read failed', text: err.message })
          }
        },
        async btnGen1aWrite () {
          try {
            const msg1 = 'Mifare Gen1a Tag will be REPLACE! Continue?'
            if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
            const genSwalCfg = i => ({
              html: `<div class="d-flex flex-column"><div class="progress mb-2"><div class="progress-bar progress-bar-striped" role="progressbar" style="width: ${i / 16 * 100}%"></div></div><div class="d-flex justify-content-between"><span>Writing mifare gen1a:</span><span>${i} / 16</span></div></div>`,
            })
            this.showLoading(genSwalCfg(0))
            const ultra = this.ultra
            await ultra.cmdChangeDeviceMode(DeviceMode.READER)
            for (let i = 0; i < 16; i++) {
              if (!this.ss.toggle[i]) continue
              const sectorData = Buffer.fromHexString(this.ss.body[i])
              await ultra.mf1Gen1aWriteBlocks(i << 2, sectorData)
              this.showLoading(genSwalCfg(i + 1))
            }
            await ultra.cmdChangeDeviceMode(DeviceMode.TAG)
            await Swal.fire({ icon: 'success', title: 'Write success' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Write failed', text: err.message })
          }
        },
        async btnGen2Read () {
          try {
            const genSwalCfg = i => ({
              html: `<div class="d-flex flex-column"><div class="progress mb-2"><div class="progress-bar progress-bar-striped" role="progressbar" style="width: ${i / 16 * 100}%"></div></div><div class="d-flex justify-content-between"><span>Reading Mifare / Gen2:</span><span>${i} / 16</span></div></div>`,
            })
            this.showLoading(genSwalCfg(0))
            const ultra = this.ultra
            await ultra.cmdChangeDeviceMode(DeviceMode.READER)
            const keys = _.chain(Buffer.from(this.ss.keys, 'hex').chunk(6))
              .filter(key => Buffer.isBuffer(key) && key.length === 6)
              .uniqBy(key => key.toString('hex'))
              .value()
            if (keys.length === 0) throw new Error('No keys found')
            const failed = []
            for (let i = 0; i < 16; i++) {
              try {
                if (!this.ss.toggle[i]) continue
                const { data: sectorData, success } = await ultra.mf1ReadSectorByKeys(i, keys)
                this.$set(this.ss.body, i, _.map(sectorData.chunk(16), chunk => chunk.toString('hex')).join('\n'))
                for (let j = 0; j < 4; j++) if (!success[j]) failed.push(i * 4 + j)
              } catch (err) {
                for (let j = 0; j < 4; j++) failed.push(i * 4 + j)
                console.error(err)
              }
              this.showLoading(genSwalCfg(i + 1))
            }
            await ultra.cmdChangeDeviceMode(DeviceMode.TAG)
            if (failed.length === 0) return await Swal.fire({ icon: 'success', title: 'Read success' })
            await Swal.fire({ icon: 'error', title: `${failed.length} blocks failed`, text: `Failed: ${failed.join(',')}` })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Read failed', text: err.message })
          }
        },
        async btnGen2Write () {
          try {
            const msg1 = 'Mifare / Gen2 Tag will be REPLACE! Continue?'
            if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
            const genSwalCfg = i => ({
              html: `<div class="d-flex flex-column"><div class="progress mb-2"><div class="progress-bar progress-bar-striped" role="progressbar" style="width: ${i / 16 * 100}%"></div></div><div class="d-flex justify-content-between"><span>Writing Mifare / Gen2:</span><span>${i} / 16</span></div></div>`,
            })
            this.showLoading(genSwalCfg(0))
            const ultra = this.ultra
            await ultra.cmdChangeDeviceMode(DeviceMode.READER)
            const keys = _.chain(Buffer.from(this.ss.keys, 'hex').chunk(6))
              .filter(key => Buffer.isBuffer(key) && key.length === 6)
              .uniqBy(key => key.toString('hex'))
              .value()
            if (keys.length === 0) throw new Error('No keys found')
            const failed = []
            for (let i = 0; i < 16; i++) {
              try {
                if (!this.ss.toggle[i]) continue
                const sectorData = Buffer.fromHexString(this.ss.body[i])
                const { success } = await ultra.mf1WriteSectorByKeys(i, keys, sectorData)
                for (let j = 0; j < 4; j++) if (!success[j]) failed.push(i * 4 + j)
              } catch (err) {
                for (let j = 0; j < 4; j++) failed.push(i * 4 + j)
                console.error(err)
              }
              this.showLoading(genSwalCfg(i + 1))
            }
            await ultra.cmdChangeDeviceMode(DeviceMode.TAG)
            if (failed.length === 0) return await Swal.fire({ icon: 'success', title: 'Write success' })
            await Swal.fire({ icon: 'error', title: `${failed.length} blocks failed`, text: `Failed: ${failed.join(',')}` })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Write failed', text: err.message })
          }
        },
        async btnKeysGrab () {
          try {
            const msg1 = 'Tool\'s mifare keys will be REPLACE! Continue?'
            if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
            this.showLoading({ text: 'Grabing' })
            let keys = []
            for (let i = 0; i < 16; i++) {
              if (!this.ss.toggle[i]) continue
              const sectorData = Buffer.fromHexString(this.ss.body[i])
              if (sectorData.length !== 64) continue
              keys.push(..._.map([48, 58], offset => sectorData.subarray(offset, offset + 6).toString('hex')))
            }
            keys = _.uniq(keys)
            if (keys.length === 0) throw new Error('No keys found')
            this.$set(this.ss, 'keys', keys.join('\n'))
            await Swal.fire({ icon: 'success', title: 'Grab success', text: `Grab ${keys.length} keys.` })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Grab failed', text: err.message })
          }
        },
        async btnKeysReset () {
          const msg1 = 'Tool\'s mifare keys will be REPLACE! Continue?'
          if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
          this.$set(this.ss, 'keys', WELL_KNOWN_KEYS.join('\n'))
        },
        async btnCardImport () {
          try {
            const file = await new Promise(resolve => {
              this.$set(this.cardImport, 'cb', tmpFile => { if (!_.isNil(tmpFile)) resolve(tmpFile) })
              const $ref = this.$refs.cardImport
              $ref.value = ''
              $ref.click()
            })
            if (file.size > 1e6) throw new Error(`File size too large: ${file.size} bytes`)
            const dotIdx = file.name.lastIndexOf('.')
            if (dotIdx === -1) throw new Error('Invalid file name')
            this.showLoading({ text: 'Importing' })
            const ext = _.toLower(file.name.slice(dotIdx + 1))
            const buf = new Buffer(await file.arrayBuffer())
            switch (ext) {
              case 'bin':
                await this.btnCardImportBin(file, buf)
                break
              case 'json':
              case 'json5':
                await this.btnCardImportJson(file, buf)
                break
              case 'eml':
                await this.btnCardImportEml(file, buf)
                break
              case 'mct':
                await this.btnCardImportMct(file, buf)
                break
              default:
                throw new Error(`Unsupported file extension: ${ext}`)
            }
            await Swal.fire({ icon: 'success', title: 'Import success', text: 'Please verify import result. Invalid bytes has been replace with 0x00.' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Import failed', text: err.message })
          }
        },
        async btnCardImportBin (file, buf) {
          if (file.size !== 1024) throw new Error(`Invalid file size: ${file.size} bytes`)
          for (let i = 0; i < 16; i++) {
            const sectorData = buf.subarray(i * 64, (i + 1) * 64)
            this.$set(this.ss.body, i, _.map(sectorData.chunk(16), chunk => chunk.toString('hex')).join('\n'))
          }
        },
        async btnCardImportJson (file, buf) {
          const json = JSON5.parse(buf.toString('utf8'))
          if (json.FileType !== 'mfcard') throw new Error(`Invalid file type: ${json.FileType}`)
          if (!_.isNil(json?.Card?.UID)) this.$set(this.ss, 'uid', _.toLower(json.Card.UID))
          if (!_.isNil(json?.Card?.ATQA)) this.$set(this.ss, 'atqa', Buffer.fromHexString(json.Card.ATQA).reverse().toString('hex'))
          if (!_.isNil(json?.Card?.SAK)) this.$set(this.ss, 'sak', json.Card.SAK)
          if (!_.isNil(json?.blocks)) {
            for (let i = 0; i < 16; i++) {
              const sectorData = new Buffer(64)
              for (let j = 0; j < 4; j++) {
                const blockhex = json?.blocks?.[i * 4 + j] ?? ''
                if (blockhex.length !== 32) continue
                const blockbuf = Buffer.fromHexString(blockhex.replaceAll('-', '0'))
                if (blockbuf.length !== 16) continue
                blockbuf.copy(sectorData, j * 16)
              }
              this.$set(this.ss.body, i, _.map(sectorData.chunk(16), chunk => chunk.toString('hex')).join('\n'))
            }
          }
        },
        async btnCardImportEml (file, buf) {
          buf = Buffer.fromHexString(buf.toString('utf8').replaceAll('-', '0'))
          if (buf.length !== 1024) throw new Error(`Invalid eml size: ${buf.length} bytes`)
          for (let i = 0; i < 16; i++) {
            const sectorData = buf.subarray(i * 64, (i + 1) * 64)
            this.$set(this.ss.body, i, _.map(sectorData.chunk(16), chunk => chunk.toString('hex')).join('\n'))
          }
        },
        async btnCardImportMct (file, buf) {
          const rows = buf.toString('utf8').split(/\r?\n/)
          buf = new Buffer(1024)
          let blockNo = 0
          for (const row of rows) {
            if (/^[+]Sector: \d+$/.test(row)) {
              blockNo = _.parseInt(row.slice(9)) * 4
            } else if (/^[0-9a-fA-F-]{32}$/.test(row)) { // hex
              if (blockNo >= 64) throw new Error(`Invalid block number: ${blockNo}`)
              const blockbuf = Buffer.fromHexString(row.replaceAll('-', '0'))
              if (blockbuf.length !== 16) throw new Error(`Invalid block size: ${blockbuf.length} bytes`)
              blockbuf.copy(buf, blockNo * 16)
              blockNo++
            }
          }
          for (let i = 0; i < 16; i++) {
            const sectorData = buf.subarray(i * 64, (i + 1) * 64)
            this.$set(this.ss.body, i, _.map(sectorData.chunk(16), chunk => chunk.toString('hex')).join('\n'))
          }
        },
        async btnCardExport () {
          const card = new Buffer(1024)
          for (let i = 0; i < 16; i++) {
            const sectorData = Buffer.fromHexString(this.ss.body[i])
            if (sectorData.length !== 64) continue // skip invalid sector
            sectorData.copy(card, i * 64)
          }
          const uid = Buffer.fromHexString(this.ss.uid)
          const atqa = Buffer.fromHexString(this.ss.atqa).reverse()
          const sak = Buffer.fromHexString(this.ss.sak)

          // helper
          const toHex = buf => _.toUpper(buf.toString('hex'))

          // json
          const json = {
            Created: 'chameleon-ultra.js',
            FileType: 'mfcard',
            Card: {
              UID: toHex(uid),
              ATQA: toHex(atqa),
              SAK: toHex(sak),
            },
            blocks: _.fromPairs(_.times(64, i => [i, toHex(card.subarray(i * 16, i * 16 + 16))])),
          }
          this.$set(this.cardExport, 'json', {
            href: URL.createObjectURL(new Blob([JSON.stringify(json, null, 2)], { type: 'application/octet-stream' })),
            download: `hf-mf-${toHex(uid)}.json`,
          })

          // bin
          this.$set(this.cardExport, 'bin', {
            href: URL.createObjectURL(new Blob([card], { type: 'application/octet-stream' })),
            download: `hf-mf-${toHex(uid)}.bin`,
          })

          // eml
          const eml = _.map(card.chunk(16), b => toHex(b)).join('\n')
          this.$set(this.cardExport, 'eml', {
            href: URL.createObjectURL(new Blob([eml], { type: 'application/octet-stream' })),
            download: `hf-mf-${toHex(uid)}.eml`,
          })

          // mct
          const mct = _.map(card.chunk(64), (sector, sectorNo) => {
            return `+Sector: ${sectorNo}\n${_.map(sector.chunk(16), b => toHex(b)).join('\n')}`
          }).join('\n')
          this.$set(this.cardExport, 'mct', {
            href: URL.createObjectURL(new Blob([mct], { type: 'application/octet-stream' })),
            download: `hf-mf-${toHex(uid)}.mct`,
          })

          await new Promise(resolve => this.$nextTick(resolve)) // wait for DOM update
          const $ref = window.jQuery(this.$refs.cardExport)
          $ref.modal('show')
        },
        async btnCardReset () {
          try {
            const msg1 = 'Tool\'s mifare card data will be RESET! Continue?'
            if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
            const tmp = {
              uid: 'deadbeef',
              atqa: '0400',
              sak: '08',
              ats: '',
              body: getEmptyCardBody(),
              toggle: _.times(16, () => true),
            }
            this.$set(this, 'ss', { ...this.ss, ...tmp })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: 'Reset failed', text: err.message })
          }
        },
        async confirm (text, confirmButtonText, cancelButtonText) {
          return await new Promise((resolve, reject) => {
            let isConfirmed = false
            const args = {
              cancelButtonColor: '#3085d6',
              cancelButtonText,
              confirmButtonColor: '#d33',
              confirmButtonText,
              didDestroy: () => { resolve(isConfirmed) },
              focusCancel: true,
              icon: 'warning',
              reverseButtons: true,
              showCancelButton: true,
              text,
            }
            Swal.fire(args).then(res => { isConfirmed = res.isConfirmed })
          })
        },
        async btnAdapterTips () {
          await Swal.fire({
            title: 'Browser & OS',
            html: '<strong class="text-primary">BLE</strong> is available in ChromeOS, Chrome for Android 6.0, Mac (Chrome 56) and Windows 10 (Chrome 70).<hr><strong class="text-primary">USB</strong> is available on all desktop platforms (ChromeOS, Linux, macOS, and Windows) in Chrome 89.',
          })
        },
        isValidBlock (str) {
          return /^([\dA-Fa-f]{32}\s*){4}$/.test(str)
        },
        isValidKeys (str) {
          return /^([\dA-Fa-f]{12}\s*)+$/.test(str)
        },
        showLoading (opts = {}) {
          opts = {
            allowOutsideClick: false,
            showConfirmButton: false,
            ...opts,
          }
          if (Swal.isVisible()) return Swal.update(_.omit(opts, ['progressStepsDistance']))
          Swal.fire({ ...opts, didRender: () => { Swal.showLoading() } })
        },
      },
    })
